[sqlÏ„yped](https://github.com/jonifreeman/sqltyped) - a macro which infers Scala types by analysing SQL statements.

This release adds following new features and improvements:

## Support for multiple compile time datasources

In Scala code bring correct configuration into scope by:

   implicit object postgresql extends ConfigurationName

The above configuration reads following system properties to establish a connection to database at compile time:

    sqltyped.postgresql.url
    sqltyped.postgresql.driver
    sqltyped.postgresql.username
    sqltyped.postgresql.password

## MySQL type conversion support

    scala> sql("select convert(age, char(10)) from person").apply
    res0: List[String] = List("36", "14")

## Results to CSV conversion

    scala> val rows = sql("select name as fname, age from person limit 100").apply.values
    scala> CSV.fromList(rows)
    res1: String = 
    "joe","36"
    "moe","14"

## Results to untyped List conversion

   scala> val rows = sql("select name, age from person limit 100").apply
   scala> Record.toTupleLists(rows)
   res2: List[List[(String, Any)]] = List(List(("name", "joe"), ("age", 36)), List(("name", "moe"), ("age", 14)))

## Improved nullability analysis

In previous versions, if a selected column was nullable it was always boxed to Option[A]. However, if the column is restricted with `WHERE x IS NOT NULL` and the expression contains only 'and' operators then it obviously can't be null and boxing is unnecessary.
